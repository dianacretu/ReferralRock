@using System.Text.Json
@using ReferralRock.Model
@using ReferralRock.Components.CommonComponents;
@inject IPageModelWithHttpClient PageModelWithHttpClient
@inject NavigationManager NavigationManager
@page "/referrals/{memberId}/update/{referralId}"
@rendermode InteractiveServer

<h1>Update referral</h1>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@if (referral != null)
{
    <FormReferral referral=@referral Action=@SubmitForm FormName="update-form"/>
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter] public string MemberId { get; set; }
    [Parameter] public string ReferralId { get; set; }
    [SupplyParameterFromForm]
    private ReceivedReferral receivedReferral { get; set; }
    private NewReferral referral { get; set; }
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ReferralApiResponse response = await PageModelWithHttpClient.GetReferrals(MemberId, ReferralId);
        
        if (response.Referrals == null)
        {
            ErrorMessage = response.Message;
            return;
        }

        if (response.Referrals.Count != 1)
        {
            throw new Exception("List is expected to have one referral.");
        }

        referral = new NewReferral();
        referral.FromReceivedReferral(response.Referrals[0]);
        receivedReferral = response.Referrals[0];
    }

    private async Task SubmitForm()
    {
        if (referral == null)
        {
            throw new Exception("Referral should not be null.");
        }

        receivedReferral.FromNewReferral(referral);
        UpdateQueryResponse response = await PageModelWithHttpClient.UpdateReferral(ReferralId, receivedReferral);
        if (response.resultInfo.Status != "Succeeded")
        {
            ErrorMessage = response.resultInfo.Message;
            StateHasChanged();
            return;
        }

        NavigationManager.NavigateTo($"referrals/{MemberId}");
    }
}
