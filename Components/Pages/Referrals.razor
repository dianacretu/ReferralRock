@using System.Text.Json
@using ReferralRock.Model
@using ReferralRock.Components.CommonComponents;
@inject IPageModelWithHttpClient PageModelWithHttpClient
@inject NavigationManager NavigationManager
@inject ILogger<Referrals> Logger
@page "/referrals/{memberId}"
@rendermode InteractiveServer

<PageTitle>Referrals</PageTitle>

<h1>Referrals</h1>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<button class="btn btn-primary" @onclick="NavigateToAddReferral">Add new referral</button>

@if (referrals == null)
{
    <p><em>No referrals</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nr.</th>
                <th>Name</th>
                <th>Email</th>
                <th>Update</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (referral, index) in referrals.Select((r, i) => (r, i)))
            {
                <tr>
                    <td>@(CurrentPage * PageSize + index + 1)</td>
                    <td>@referral.DisplayName</td>
                    <td>@referral.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToUpdateReferral(referral.Id)">Update</button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => DeleteReferral(referral.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalPages=@TotalPages CurrentPage=@CurrentPage Action=@LoadPage/>
}

@code {
    [Parameter] public string MemberId { get; set; }
    private List<ReceivedReferral>? referrals;
    private int CurrentPage { get; set; } = 0;
    private int PageSize { get; set; } = 5;
    private int TotalPages { get; set; } = 1;
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(CurrentPage);
    }

    private async Task LoadPage(int page)
    {
        CurrentPage = page;
        ReferralApiResponse response = await PageModelWithHttpClient.GetReferrals(memberId: MemberId, offset: CurrentPage * PageSize, count: PageSize);
        if (response.Referrals == null)
        {
            ErrorMessage = response.Message;
            Logger.LogError("Received error when fetching referrals: " + response.Message);
            StateHasChanged();
            return;
        }

        TotalPages = (int)Math.Ceiling((double)response.Total / PageSize);
        referrals = response.Referrals;
        Logger.LogInformation("Received referrals from API.");
        StateHasChanged();
    }

    protected void NavigateToAddReferral()
    {
        NavigationManager.NavigateTo($"referrals/{MemberId}/new", forceLoad: true);
    }

    protected void NavigateToUpdateReferral(string referralId)
    {
        NavigationManager.NavigateTo($"referrals/{MemberId}/update/{referralId}", forceLoad: true);
    }

    protected async void DeleteReferral(string referralId)
    {
        var response = await PageModelWithHttpClient.DeleteReferral(referralId, MemberId);
        if (response.resultInfo.Status != "Success")
        {        
            Logger.LogError("Received error when deleting referral " + referralId + ": " + response.resultInfo.Message);
            ErrorMessage = response.resultInfo.Message;
            StateHasChanged();
            return;
        }

        Logger.LogInformation("Deleted referral " + referralId + ".");
        NavigationManager.NavigateTo($"referrals/{MemberId}", forceLoad: true);
    }
}
